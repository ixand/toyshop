package middleware

import (
	"fmt"
	"net/http"
	"strings"
	"toyshop/utils"

	"github.com/gin-gonic/gin"
)

// AuthMiddleware –≤–∏—Ç—è–≥—É—î user_id —ñ role –∑ JWT —ñ –¥–æ–¥–∞—î –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
func AuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		authHeader := c.GetHeader("Authorization")
		if authHeader == "" || !strings.HasPrefix(authHeader, "Bearer ") {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –ø–æ—Ç—Ä—ñ–±–Ω–∞"})
			c.Abort()
			return
		}

		tokenString := strings.TrimPrefix(authHeader, "Bearer ")
		fmt.Println("üîê Token string:", tokenString)
		claims, err := utils.ParseJWT(tokenString)
		fmt.Printf("‚úÖ Claims: user_id=%d, role=%s\n", claims.UserID, claims.Role)

		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω"})
			c.Abort()
			return
		}

		c.Set("user_id", claims.UserID)
		c.Set("role", claims.Role)

		c.Next()
	}

}

// AdminOnly –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ‚Äî admin
func AdminOnly() gin.HandlerFunc {
	return func(c *gin.Context) {
		roleRaw, exists := c.Get("role")
		if !exists || roleRaw.(string) != "admin" {
			c.JSON(http.StatusForbidden, gin.H{"error": "–î–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π –ª–∏—à–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"})
			c.Abort()
			return
		}
		c.Next()
	}
}
